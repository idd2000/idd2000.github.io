(function(y,z){typeof exports=="object"&&typeof module<"u"?module.exports=z():typeof define=="function"&&define.amd?define(z):(y=typeof globalThis<"u"?globalThis:y||self,y.SnakeGame=z())})(this,function(){"use strict";let y={draw(i){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.snake.forEach((s,r)=>{let t=0;r!=0&&r!=this.snake.length-1&&(this.checkIfTurn(this.snake[r-1],this.snake[r+1])?(this.snake[r].namesegment||(this.snake[r].namesegment=this.getTurnTexture(this.snake[r-1],s,this.snake[r+1])),this.drawSegment(s,r,this.calculateWaist(r),this.snake[r].namesegment)):(this.snake[r].namesegment||(t=this.getRotationAngle(this.snake[r-1],s),this.snake[r].namesegment=t==0||t==Math.PI?"horizontal":"vertical"),this.drawSegment(s,r,this.calculateWaist(r),this.snake[r].namesegment)))});let e=0;e=this.getRotationAngle(this.snake[0],this.snake[1]),this.drawHead(this.snake[0],i,e),e=this.getRotationAngle(this.snake[this.snake.length-2],this.snake[this.snake.length-1]),this.drawTail(this.snake[this.snake.length-1],this.snake.length-1,this.calculateWaist(this.snake.length-1),i,e);let h=new Date().getTime();this.drawFood(this.food,this.foodImage,(h-this.foodLastSpawn)/(this.foodMaxTime*1e3)),this.candy&&this.drawFood(this.candy,this.candyImage,(h-this.candyLastSpawn)/(this.candyMaxTime*1e3)),this.rocks.forEach(s=>{this.ctx.drawImage(this.rockImage,s.x*this.gridSize,s.y*this.gridSize,this.gridSize,this.gridSize)})},drawFood(i,e,h){let s=i.x*this.gridSize+this.gridSize/2,r=i.y*this.gridSize+this.gridSize/2,t=1.5*this.gridSize-h*this.gridSize;this.ctx.drawImage(e,s-t/2,r-t/2,t,t)},drawTail(i,e,h,s=0,r=0){this.ctx.beginPath();const t=this.snake[e-1],a=this.snake[e-2],d=a&&this.checkIfTurn(a,i);if(this.not_pop_snake===0)if(d){let o=i.x>t.x&&t.y>a.y||i.y>t.y&&t.x<a.x||i.x<t.x&&t.y<a.y||i.y<t.y&&t.x>a.x;const l=Math.PI/2*s;let x=i.x*this.gridSize+(t.x>i.x||a.x>t.x?this.gridSize:0),n=i.y*this.gridSize+(t.y>i.y||a.y>t.y?this.gridSize:0);if((Math.abs(i.x-t.x)>1||Math.abs(i.y-t.y)>1||Math.abs(t.x-a.x)>1||Math.abs(t.y-a.y)>1)&&(o=!o,Math.abs(t.x-a.x)>1&&(x=x+Math.sign(t.x-a.x)*this.gridSize),Math.abs(t.y-a.y)>1&&(n=n+Math.sign(t.y-a.y)*this.gridSize),Math.abs(i.x-t.x)>1&&(x=x+Math.sign(i.x-t.x)*this.gridSize),Math.abs(i.y-t.y)>1&&(n=n+Math.sign(i.y-t.y)*this.gridSize)),this.ctx.save(),this.ctx.translate(x,n),this.ctx.rotate(r+(o?l:-l)),this.ctx.clearRect(1,o?1:-this.gridSize+1,this.gridSize,this.gridSize),this.ctx.moveTo(0,o?h:-h),this.ctx.bezierCurveTo(this.gridSize,o?h:-h,this.gridSize,o?this.gridSize-h:h-this.gridSize,0,o?this.gridSize-h:h-this.gridSize),this.ctx.restore(),Math.abs(i.x-t.x)>1||Math.abs(i.y-t.y)>1){let c=i.x>t.x&&t.y>a.y||i.y>t.y&&t.x<a.x||i.x<t.x&&t.y<a.y||i.y<t.y&&t.x>a.x;c=!c;let S=t.x*this.gridSize,g=t.y*this.gridSize;Math.abs(i.x-t.x)>1?(Math.sign(i.x-t.x)==-1&&(S+=this.gridSize),Math.sign(t.y-a.y)==-1&&(g+=this.gridSize)):Math.abs(i.y-t.y)>1&&(S=t.x*this.gridSize,g=t.y*this.gridSize,Math.sign(i.y-t.y)==-1&&(g+=this.gridSize),Math.sign(t.x-a.x)==-1&&(S+=this.gridSize)),this.ctx.save(),this.ctx.translate(S,g),this.ctx.rotate(r+(c?l:-l)),this.ctx.clearRect(1,c?1:-this.gridSize+1,this.gridSize,this.gridSize),this.ctx.moveTo(0,c?h:-h),this.ctx.bezierCurveTo(this.gridSize,c?h:-h,this.gridSize,c?this.gridSize-h:h-this.gridSize,0,c?this.gridSize-h:h-this.gridSize),this.ctx.restore()}}else this.applyStraightTransformation(i,r,s,h),this.drawTailWithWall(i,t,r,s,h);else this.applyStraightTransformation(i,r,0,h),this.drawTailWithWall(i,t,r,s,h);this.ctx.fillStyle=this.fillStyle,this.ctx.fill(),this.ctx.closePath()},applyStraightTransformation(i,e,h,s){this.ctx.save();let r=i.x*this.gridSize,t=i.y*this.gridSize;e<0?t+=this.gridSize+this.gridSize*h:e>1&&e<2?(r+=this.gridSize,t-=this.gridSize*h):e===0?r-=this.gridSize*h:e>3&&e<4&&(r+=this.gridSize+this.gridSize*h,t+=this.gridSize),this.ctx.translate(r,t),this.ctx.rotate(e),this.ctx.clearRect(1,1,this.gridSize,this.gridSize),this.ctx.moveTo(0,s),this.ctx.bezierCurveTo(this.gridSize,s,this.gridSize,this.gridSize-s,0,this.gridSize-s),this.ctx.restore()},drawTailWithWall(i,e,h,s,r){if(Math.abs(i.x-e.x)>1||Math.abs(i.y-e.y)>1){this.ctx.save();let t=e.x*this.gridSize,a=e.y*this.gridSize;h<0?a+=this.gridSize*s:h>1&&h<2?(t+=this.gridSize,a-=this.gridSize*s-this.gridSize):h===0?t-=this.gridSize*s-this.gridSize:h>3&&h<4&&(t+=this.gridSize*s,a+=this.gridSize),this.ctx.translate(t,a),this.ctx.rotate(h),this.ctx.clearRect(1,1,this.gridSize,this.gridSize),this.ctx.moveTo(0,r),this.ctx.bezierCurveTo(this.gridSize,r,this.gridSize,this.gridSize-r,0,this.gridSize-r),this.ctx.restore()}},drawSegment(i,e,h,s,r=0,t=0){let a,d,o;this.snake[e+1].x<i.x?a="left":this.snake[e+1].x>i.x?a="right":this.snake[e+1].y<i.y?a="top":this.snake[e+1].y>i.y&&(a="bottom"),d=h,o=this.calculateWaist(e+1),this.ctx.beginPath(),s=="horizontal"?(a=="left"&&(d=this.calculateWaist(e+1),o=h),this.ctx.moveTo(i.x*this.gridSize,i.y*this.gridSize+d),this.ctx.lineTo(i.x*this.gridSize+this.gridSize,i.y*this.gridSize+o),this.ctx.lineTo(i.x*this.gridSize+this.gridSize,i.y*this.gridSize+this.gridSize-o),this.ctx.lineTo(i.x*this.gridSize,i.y*this.gridSize+this.gridSize-d)):s=="vertical"?(a=="top"&&(d=this.calculateWaist(e+1),o=h),this.ctx.moveTo(i.x*this.gridSize+d,i.y*this.gridSize),this.ctx.lineTo(i.x*this.gridSize+o,i.y*this.gridSize+this.gridSize),this.ctx.lineTo(i.x*this.gridSize+this.gridSize-o,i.y*this.gridSize+this.gridSize),this.ctx.lineTo(i.x*this.gridSize+this.gridSize-d,i.y*this.gridSize)):s=="bottomright"?(a=="right"&&(d=this.calculateWaist(e+1),o=h),this.ctx.moveTo(i.x*this.gridSize+this.gridSize,i.y*this.gridSize+d),this.ctx.arcTo(i.x*this.gridSize+o,i.y*this.gridSize+o,i.x*this.gridSize+o,i.y*this.gridSize+this.gridSize,this.gridSize-o),this.ctx.lineTo(i.x*this.gridSize+this.gridSize-o,i.y*this.gridSize+this.gridSize),this.ctx.arcTo(i.x*this.gridSize+this.gridSize-d,i.y*this.gridSize+this.gridSize-d,i.x*this.gridSize+this.gridSize,i.y*this.gridSize+this.gridSize-d,d)):s=="bottomleft"?(a=="left"&&(d=this.calculateWaist(e+1),o=h),this.ctx.moveTo(i.x*this.gridSize,i.y*this.gridSize+d),this.ctx.arcTo(i.x*this.gridSize+this.gridSize-o,i.y*this.gridSize+o,i.x*this.gridSize+this.gridSize-o,i.y*this.gridSize+this.gridSize,this.gridSize-o),this.ctx.lineTo(i.x*this.gridSize+o,i.y*this.gridSize+this.gridSize),this.ctx.arcTo(i.x*this.gridSize+d,i.y*this.gridSize+this.gridSize-d,i.x*this.gridSize,i.y*this.gridSize+this.gridSize-d,d)):s=="topleft"?(a=="top"&&(d=this.calculateWaist(e+1),o=h),this.ctx.moveTo(i.x*this.gridSize+this.gridSize-d,i.y*this.gridSize),this.ctx.arcTo(i.x*this.gridSize+this.gridSize-o,i.y*this.gridSize+this.gridSize-o,i.x*this.gridSize,i.y*this.gridSize+this.gridSize-o,this.gridSize-o),this.ctx.lineTo(i.x*this.gridSize,i.y*this.gridSize+o),this.ctx.arcTo(i.x*this.gridSize+d,i.y*this.gridSize+d,i.x*this.gridSize+d,i.y*this.gridSize,d)):s=="topright"&&(a=="top"&&(d=this.calculateWaist(e+1),o=h),this.ctx.save(),this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize),this.ctx.moveTo(d,0),this.ctx.arcTo(h,this.gridSize-o,this.gridSize,this.gridSize-o,this.gridSize-o),this.ctx.lineTo(this.gridSize,o),this.ctx.arcTo(this.gridSize-d,d,this.gridSize-d,0,d),this.ctx.restore()),this.ctx.fillStyle=this.fillStyle,this.ctx.fill(),this.ctx.closePath()},drawHead(i,e=0,h=0){let s=this.headTexture;if(this.snake[2]&&this.checkIfTurn(i,this.snake[2])){this.ctx.save();let r=Math.PI/2*e,t,a;if(h<0?a="bottom":h>1&&h<2?a="top":h==0?a="left":h>3&&h<4&&(a="right"),a=="left"||a=="right"?(this.snake[2].y<i.y&&(t=i.y-this.snake[2].y==1?"top":"bottom"),this.snake[2].y>i.y&&(t=this.snake[2].y-i.y==1?"bottom":"top")):(this.snake[2].x<i.x&&(t=i.x-this.snake[2].x==1?"right":"left"),this.snake[2].x>i.x&&(t=this.snake[2].x-i.x==1?"left":"right")),t=="bottom"&&a=="right"||t=="top"&&a=="left"||t=="left"&&a=="top"||t=="right"&&a=="bottom"?(t=="bottom"&&this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize+this.gridSize),t=="top"&&this.ctx.translate(i.x*this.gridSize+this.gridSize,i.y*this.gridSize),t=="left"&&this.ctx.translate(i.x*this.gridSize+this.gridSize,i.y*this.gridSize+this.gridSize),t=="right"&&this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize),this.ctx.rotate(h-Math.PI/2+r),this.ctx.clearRect(-this.gridSize-1,-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,-this.gridSize,0,this.gridSize,this.gridSize)):(t=="bottom"&&this.ctx.translate(i.x*this.gridSize+this.gridSize,i.y*this.gridSize+this.gridSize),t=="top"&&this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize),t=="left"&&this.ctx.translate(i.x*this.gridSize+this.gridSize,i.y*this.gridSize),t=="right"&&this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize+this.gridSize),this.ctx.rotate(h+Math.PI/2-r),this.ctx.clearRect(-this.gridSize-1,-this.gridSize-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,-this.gridSize,-this.gridSize,this.gridSize,this.gridSize)),this.ctx.restore(),this.isMoveThroughWall(i,this.snake[1])){this.ctx.save();let o;a=="left"||a=="right"?(this.snake[2].y<this.snake[1].y&&(o="top"),this.snake[2].y>this.snake[1].y&&(o="bottom")):(this.snake[2].x<this.snake[1].x&&(o="right"),this.snake[2].x>this.snake[1].x&&(o="left")),o=="bottom"&&a=="right"||o=="top"&&a=="left"||o=="left"&&a=="top"||o=="right"&&a=="bottom"?(o=="bottom"&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize,this.snake[1].y*this.gridSize+this.gridSize),o=="top"&&this.ctx.translate(this.snake[1].x*this.gridSize,this.snake[1].y*this.gridSize),o=="left"&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize,this.snake[1].y*this.gridSize),o=="right"&&this.ctx.translate(this.snake[1].x*this.gridSize,this.snake[1].y*this.gridSize+this.gridSize),this.ctx.rotate(h-Math.PI/2+r),this.ctx.clearRect(-this.gridSize-1,-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,-this.gridSize,0,this.gridSize,this.gridSize)):(o=="bottom"&&this.ctx.translate(this.snake[1].x*this.gridSize,this.snake[1].y*this.gridSize+this.gridSize),o=="top"&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize,this.snake[1].y*this.gridSize),o=="left"&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize,this.snake[1].y*this.gridSize+this.gridSize),o=="right"&&this.ctx.translate(this.snake[1].x*this.gridSize,this.snake[1].y*this.gridSize),this.ctx.rotate(h+Math.PI/2-r),this.ctx.clearRect(-this.gridSize-1,-this.gridSize-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,-this.gridSize,-this.gridSize,this.gridSize,this.gridSize)),this.ctx.restore()}}else{this.ctx.save();let r=this.gridSize*e;if(h<0?this.ctx.translate(i.x*this.gridSize,i.y*this.gridSize+r):h>1&&h<2?this.ctx.translate(i.x*this.gridSize+this.gridSize,i.y*this.gridSize-r+this.gridSize):h==0?this.ctx.translate(i.x*this.gridSize+this.gridSize-r,i.y*this.gridSize):h>3&&h<4&&this.ctx.translate(i.x*this.gridSize+r,i.y*this.gridSize+this.gridSize),this.ctx.rotate(h),this.ctx.clearRect(-1,-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,0,0,this.gridSize,this.gridSize),this.ctx.restore(),this.isMoveThroughWall(i,this.snake[1])){this.ctx.save();let t=this.gridSize*e;i.x==0&&this.snake[1].x==this.canvasWidth-1&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize+t,this.snake[1].y*this.gridSize+this.gridSize),i.x==this.canvasWidth-1&&this.snake[1].x==0&&this.ctx.translate(this.snake[1].x*this.gridSize-t,this.snake[1].y*this.gridSize),i.y==0&&this.snake[1].y==this.canvasHeight-1&&this.ctx.translate(this.snake[1].x*this.gridSize,this.snake[1].y*this.gridSize+this.gridSize+t),i.y==this.canvasHeight-1&&this.snake[1].y==0&&this.ctx.translate(this.snake[1].x*this.gridSize+this.gridSize,this.snake[1].y*this.gridSize-t),this.ctx.rotate(h),this.ctx.clearRect(-1,-1,this.gridSize,this.gridSize),this.ctx.drawImage(s,0,0,this.gridSize,this.gridSize),this.ctx.restore()}}},isMoveThroughWall(i,e){return i.x==0&&e.x==this.canvasWidth-1||i.x==this.canvasWidth-1&&e.x==0||i.y==0&&e.y==this.canvasHeight-1||i.y==this.canvasHeight-1&&e.y==0},calculateWaist(i){let e=this.snake.length-1,h=this.gridSize*.75,s=this.gridSize*.5,r=h;for(let t=0;t<e;t++)r=r-.25;return r>s&&(s=r),this.gridSize*.125+(h-s)/2/e*i},getRotationAngle(i,e){if(!e)return 0;let h=e.x-i.x,s=e.y-i.y;return h<-1&&(h=1),h>1&&(h=-1),s<-1&&(s=1),s>1&&(s=-1),h===1?0:h===-1?Math.PI:s===1?Math.PI/2:s===-1?-Math.PI/2:0},checkIfTurn(i,e){return i.x!==e.x&&i.y!==e.y},getTurnTexture(i,e,h){let s=e.x-i.x,r=e.y-i.y,t=h.x-e.x,a=h.y-e.y;if(Math.abs(s)>1&&(s=-s/Math.abs(s)),Math.abs(r)>1&&(r=-r/Math.abs(r)),Math.abs(t)>1&&(t=-t/Math.abs(t)),Math.abs(a)>1&&(a=-a/Math.abs(a)),r===1&&t===-1||s==1&&a==-1)return"topleft";if(r===-1&&t===-1||s==1&&a==1)return"bottomleft";if(r===1&&t===1||s==-1&&a==-1)return"topright";if(r===-1&&t===1||s==-1&&a==1)return"bottomright"},random(i,e){return Math.floor(Math.random()*e)+i},generateHexColor(){return`#${this.random(0,255).toString(16).padStart(2,"0")}${this.random(0,255).toString(16).padStart(2,"0")}${this.random(0,255).toString(16).padStart(2,"0")}`}};class z{constructor(e,h,s){this.grid=e,this.snake=h,this.rocks=s}isCellAvailable(e,h){const s=(e+this.grid.width)%this.grid.width,r=(h+this.grid.height)%this.grid.height;return!this.snake.some(t=>t.x===s&&t.y===r)&&!this.rocks.some(t=>t.x===s&&t.y===r)}evaluateSpace(e,h){const s=[{x:e,y:h}],r=new Set([`${e},${h}`]);let t=0;for(;s.length>0&&t<10;){const{x:a,y:d}=s.shift();t++;const o=[{x:1,y:0},{x:-1,y:0},{x:0,y:1},{x:0,y:-1}];for(const l of o){const x=(a+l.x+this.grid.width)%this.grid.width,n=(d+l.y+this.grid.height)%this.grid.height,c=`${x},${n}`;this.isCellAvailable(x,n)&&!r.has(c)&&(r.add(c),s.push({x,y:n}))}}return t}isPathSafe(e,h,s=20){if(s<=0)return!0;const r=[{x:1,y:0},{x:-1,y:0},{x:0,y:1},{x:0,y:-1}];for(const t of r){const a=(e+t.x+this.grid.width)%this.grid.width,d=(h+t.y+this.grid.height)%this.grid.height;if(this.isCellAvailable(a,d)&&this.isPathSafe(a,d,s-1))return!0}return!1}findSafePath(e,h){const s=this.snake[0],r=[{x:s.x,y:s.y,path:[]}],t=new Set([`${s.x},${s.y}`]);let a=[];for(;r.length>0;){const{x:d,y:o,path:l}=r.shift();if((d===e.x&&o===e.y||h&&d===h.x&&o===h.y)&&this.evaluateSpace(d,o)>=5&&this.isPathSafe(d,o))return l.length>0?l[0]:null;a=[{x:1,y:0},{x:-1,y:0},{x:0,y:1},{x:0,y:-1}].map(n=>{const c=(d+n.x+this.grid.width)%this.grid.width,S=(o+n.y+this.grid.height)%this.grid.height,g=`${c},${S}`;return this.isCellAvailable(c,S)&&!t.has(g)?{dir:n,newX:c,newY:S,space:this.evaluateSpace(c,S)}:null}).filter(n=>n!==null).sort((n,c)=>c.space-n.space);for(const n of a){const{dir:c,newX:S,newY:g}=n,u=`${S},${g}`;t.add(u),r.push({x:S,y:g,path:[...l,c]})}}return a.length>0?a[0].dir:null}}class f{constructor(e){this.canvas=document.getElementById(e),this.ctx=this.canvas.getContext("2d"),this.gridSize=32,this.canvasWidth=this.canvas.width/this.gridSize,this.canvasHeight=this.canvas.height/this.gridSize,this.foodImage=new Image,this.foodImage.src="img/apple.png",this.rockImage=new Image,this.rockImage.src="img/rock.png",this.candyImage=new Image,this.candyImage.src="img/candy.png",this.headTexture=new Image,this.headTexture.src="img/head_left.png",this.is_end_game=!1,this.fillStyle="#0D8AFD",this.score=0,this.scoreObj=document.querySelector("#score"),this.candy=null,this.candyChance=.005,this.rocks=[],this.snake=[{x:10,y:10},{x:9,y:10},{x:8,y:10}],this.direction={x:1,y:0},this.lastUpdateTime=0,this.not_pop_snake=3,this.lock_changeDir=!1,this.autopilot=!1,this.snakeAI=new z({width:this.canvasWidth,height:this.canvasHeight},this.snake,this.rocks),this.candyTimeout=null,this.food=null,this.food=this.getRandomPosition(),this.foodLastSpawn=new Date().getTime(),this.candyLastSpawn=null,this.foodMaxTime=6,this.candyMaxTime=3,this.foodTimeout=setTimeout(()=>{this.food=this.getRandomPosition(),this.foodLastSpawn=new Date().getTime()},this.foodMaxTime*1e3),this.leftButton=document.getElementById("button_left"),this.upButton=document.getElementById("button_up"),this.downButton=document.getElementById("button_down"),this.rightButton=document.getElementById("button_right"),this.autopilot_button=document.getElementById("autopilot_button"),this.reset_button=document.getElementById("reset_button"),this.game_menu=document.getElementById("game_menu"),this.score_in_menu=document.getElementById("score_in_menu"),this.record_in_menu=document.getElementById("record_in_menu"),this.difficulty_select=document.getElementById("difficulty"),this.difficulty=Number(this.difficulty_select.value),this.leftButton.addEventListener("click",()=>{this.buttonsControls({x:-1,y:0})}),this.upButton.addEventListener("click",()=>{this.buttonsControls({x:0,y:-1})}),this.downButton.addEventListener("click",()=>{this.buttonsControls({x:0,y:1})}),this.rightButton.addEventListener("click",()=>{this.buttonsControls({x:1,y:0})}),this.autopilot_button.addEventListener("click",()=>{this.autopilot=!this.autopilot,this.autopilot?this.autopilot_button.innerHTML="Выключить автопилот":this.autopilot_button.innerHTML="Включить автопилот",this.updateButtons()}),this.reset_button.addEventListener("click",()=>{this.resetGame()}),this.difficulty_select.addEventListener("change",h=>{this.difficulty=Number(h.target.value)}),this.main=this.main.bind(this),this.changeDirection=this.changeDirection.bind(this),window.addEventListener("keydown",h=>this.changeDirection(h)),window.requestAnimationFrame(h=>this.main(h))}snakeSpeed(){return 3+this.difficulty+Math.trunc(this.score/30)*.5}main(e){if(window.requestAnimationFrame(h=>this.main(h)),!this.is_end_game){const h=(e-this.lastUpdateTime)/1e3;h>=1/this.snakeSpeed()&&(this.lastUpdateTime=e,(this.direction.x!=0||this.direction.y!=0)&&this.update());let s=h/(1/this.snakeSpeed());this.draw(s>=1?0:s)}}spawnRocks(){let e=Math.trunc(this.score/30)*this.difficulty;if(this.rocks.length<e){let h=e-this.rocks.length;for(let s=0;s<h;s++)this.rocks.push(this.getRandomPosition())}this.snakeAI.rocks=this.rocks}getRandomPosition(){let e=[];for(let s=0;s<this.canvasWidth;s++)for(let r=0;r<this.canvasHeight;r++){let t=this.snake.filter(a=>s==a.x&&r==a.y).length==0&&this.rocks.filter(a=>s==a.x&&r==a.y).length==0;this.candy&&this.candy.x==s&&this.candy.y==r&&(t=!1),this.food&&this.food.x==s&&this.food.y==r&&(t=!1),t&&e.push({x:s,y:r})}return e[Math.floor(Math.random()*(e.length-1))]}update(){let e=new Date().getTime(),h=!1;if(this.autopilot){const t=this.snakeAI.findSafePath(this.food,this.candy);t&&(this.direction=t)}const s={...this.snake[0]};s.x+=this.direction.x,s.y+=this.direction.y,s.x<0&&(s.x=this.canvasWidth-1),s.x>=this.canvasWidth&&(s.x=0),s.y<0&&(s.y=this.canvasHeight-1),s.y>=this.canvasHeight&&(s.y=0);let r=Math.random();if(this.candy==null&&r<this.candyChance&&(this.candy=this.getRandomPosition(),this.candyLastSpawn=new Date().getTime(),this.candyTimeout=setTimeout(()=>{this.candy=null},this.candyMaxTime*1e3)),this.candy&&s.x===this.candy.x&&s.y===this.candy.y){this.candyTimeout&&clearTimeout(this.candyTimeout),this.candy=null,this.not_pop_snake=4;let t=(e-this.candyLastSpawn)/(this.candyMaxTime*1e3);this.score+=20-Math.trunc(20*t),this.scoreObj.innerHTML=this.score,this.spawnRocks()}if(s.x===this.food.x&&s.y===this.food.y){this.foodTimeout&&clearTimeout(this.foodTimeout);let t=(e-this.foodLastSpawn)/(this.foodMaxTime*1e3);h=!0,this.score+=10-Math.trunc(10*t),this.scoreObj.innerHTML=this.score,this.not_pop_snake=2,this.food=this.getRandomPosition(),this.foodLastSpawn=new Date().getTime(),this.foodTimeout=setTimeout(()=>{this.food=this.getRandomPosition(),this.foodLastSpawn=new Date().getTime()},this.foodMaxTime*1e3),this.spawnRocks()}!h&&this.not_pop_snake==0?this.snake.pop():this.not_pop_snake=this.not_pop_snake-1,(s.x<0||s.x>=this.canvasWidth||s.y<0||s.y>=this.canvasHeight||this.rocks.some((t,a)=>t.x===s.x&&t.y===s.y)||this.snake.some((t,a)=>a>0&&t.x===s.x&&t.y===s.y))&&this.endGame(),this.snake.unshift(s),this.lock_changeDir=!1,this.snakeAI.snake=this.snake}endGame(){this.is_end_game=!0,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.score_in_menu.innerHTML=this.score,Number(this.record_in_menu.innerHTML)<this.score&&(this.record_in_menu.innerHTML=this.score),this.game_menu.style.display="flex"}resetGame(){this.is_end_game=!1,this.candy=null,this.rocks=[],this.direction={x:1,y:0},this.snake=[{x:10,y:10},{x:9,y:10},{x:8,y:10}],this.not_pop_snake=3,this.food=this.getRandomPosition(),this.foodLastSpawn=new Date().getTime(),this.score=0,this.scoreObj.innerHTML=this.score,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.updateButtons(),this.game_menu.style.display="none"}changeDirection(e){if(this.lock_changeDir==!1&&!this.autopilot){const h=e.key,{x:s,y:r}=this.direction;h==="ArrowUp"&&r===0&&(this.direction={x:0,y:-1}),h==="ArrowDown"&&r===0&&(this.direction={x:0,y:1}),h==="ArrowLeft"&&s===0&&(this.direction={x:-1,y:0}),h==="ArrowRight"&&s===0&&(this.direction={x:1,y:0}),this.lock_changeDir=!0,this.updateButtons()}}buttonsControls(e){if(!this.autopilot){const{x:h,y:s}=this.direction;this.lock_changeDir==!1&&(h===0&&e.x!=0||s===0&&e.y!=0)&&(this.direction=e,this.lock_changeDir=!0,this.updateButtons())}}updateButtons(){this.direction.x!=0&&(this.leftButton.style.display="none",this.rightButton.style.display="none",this.upButton.style.display="block",this.downButton.style.display="block"),this.direction.y!=0&&(this.leftButton.style.display="block",this.rightButton.style.display="block",this.upButton.style.display="none",this.downButton.style.display="none")}}return Object.assign(f.prototype,y),f});
